x=1
rm(list=ls())
install.packages("XML", "/home/user/anaconda3/lib/R/library")
install.packages("XML", "/home/user/anaconda3/lib/R/library")
install.packages("XML", "/home/user/anaconda3/lib/R/library")
version
install.packages("XML")
version
# We launch the libraries
library(rlist)
library(data.table)
library(dplyr)
library(XML)
library(methods)
library(xlsx)
library(jsonlite)
library(writexl)
library(stringr)
folder = "C:/Users/ohongnat/Documents/Article_nomenclature_test/Dataset"
setwd(folder)
# Open different xml in the same time
# We select the xmls with the datas we need
xmlfiles=list.files(pattern='product3')
# We remove the datas about genetic disorders, they have no interest here
xmlfiles=xmlfiles[!xmlfiles=='en_product3_156.xml']
# We put the xml files from  orphadata in data frames
indice_list=1
xmldoc=list()
products3=list()
for (i in 1:length(xmlfiles))
{
xmldoc[[indice_list]]=xmlParse(xmlfiles[i])
products3[[indice_list]]=xmlToList(xmldoc[[indice_list]])
indice_list=indice_list+1
}
# We get the Classification information
prods3=list()
for (i in 1:length(products3))
{
prods3[[i]]=unlist(products3[[i]]$ClassificationList)
}
# Each element in the list is a disorder
# We get the OrphaCode and the DisorderType for each disorder
disordertype = list()
OrphaCode = list()
indice_orpha = 1
indice_disordertype = 1
for (i in 1:length(prods3))
for (j in 1:length(prods3[[i]]))
if (grepl("Disorder.OrphaCode", names(prods3[[i]][j]))) {
OrphaCode[[indice_orpha]] = data.frame(classification = prods3[[i]][2],
OrphaCode = prods3[[i]][j])
indice_orpha = indice_orpha + 1
} else if (grepl("DisorderType..attrs.id", names(prods3[[i]][j]))) {
disordertype[[indice_disordertype]] = data.frame(classification = prods3[[i]][2],
disordertype = prods3[[i]][j])
indice_disordertype = indice_disordertype + 1
}
disordertype = rbindlist(disordertype)
OrphaCode = rbindlist(OrphaCode)
# We only keep Disorders
disorders = cbind.data.frame(OrphaCode, disordertype = disordertype$disordertype)
disorders = filter(disorders, !duplicated(disorders))
disorders = filter(disorders, disordertype == "21429" |
disordertype == "21401" |
disordertype == "21415" |
disordertype == "21394" |
disordertype == "21422" |
disordertype == "21408")
# We count how much times an OrphaCode is duplicated
table_count=as.data.frame(table(disorders$OrphaCode))
names(table_count)=c('OrphaCode','Number of classifications')
# We look for ORPHAcodes which are duplicated at least once
indice_list=1
duplicates=list()
for (i in 1:nrow(table_count))
if (table_count$`Number of classifications`[i] > 1)
{
duplicates[[indice_list]]=table_count[i, ]
indice_list=indice_list+1
}
duplicates=rbindlist(duplicates,use.names = TRUE)
# Number of disorders multiclassified
number_of_disorders_multiclassified=nrow(duplicates)
number_of_disorders_multiclassified
print(paste0("The number of disorders multiclassified is ", number_of_disorders_multiclassified))
# Percentage of disorders multiclassified
percentage_of_number_of_disorders_multiclassified=number_of_disorders_multiclassified/nrow(table_count)*100
percentage_of_number_of_disorders_multiclassified
print(paste0("The percentage of disorders multiclassified is ", percentage_of_number_of_disorders_multiclassified, "%"))
# Number of disorders uniclassified
number_of_disorders_uniclassified=nrow(table_count) - number_of_disorders_multiclassified
number_of_disorders_uniclassified
print(paste0("The number of disorders uniclassified is ", number_of_disorders_uniclassified))
# Percentage of disorders uniclassified
percentage_of_number_of_disorders_uniclassified=number_of_disorders_uniclassified/nrow(table_count)*100
percentage_of_number_of_disorders_uniclassified
print(paste0("The percentage of disorders uniclassified is ", percentage_of_number_of_disorders_uniclassified, "%"))
### Stats : min/max, mean, median of the number of classifications for the disorders
summary(table_count$`Number of classifications`)
